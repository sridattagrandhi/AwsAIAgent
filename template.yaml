AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AI Sales Outreach Agent – Hackathon demo (API Gateway + Lambdas + DynamoDB + Bedrock + SES events)

Globals:
  Function:
    Runtime: python3.12
    Timeout: 25
    MemorySize: 512
    CodeUri: lambda_functions
    Environment:
      Variables:
        EMAIL_DRY_RUN: "0"
        SEARCH_DRY_RUN: "1"
        BEDROCK_MODEL_ID: "amazon.nova-pro-v1:0"
        BEDROCK_REGION: "us-east-1"
        LEADS_TABLE_NAME: "LeadsTable"

  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Parameters:
  FromEmail:
    Type: String
    Default: ""
    Description: Default SES sender (verified address)

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  LeadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LeadsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH

  SearchShopify:
    Type: AWS::Serverless::Function
    Properties:
      Handler: search_shopify_retailers.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Events:
        PostSearch:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /search
            Method: post

  StoreLead:
    Type: AWS::Serverless::Function
    Properties:
      Handler: store_lead_data.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Events:
        PostStore:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /leads
            Method: post

  UpdateLeadStatus:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_lead_status.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Events:
        PostUpdateStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /leads/status
            Method: post

  SendEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send_cold_email.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Environment:
        Variables:
          SES_FROM_EMAIL: !Ref FromEmail
      Events:
        PostEmail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /email/send
            Method: post

  DraftEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bedrock_email_draft.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: "*"
      Events:
        PostDraft:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /email/draft
            Method: post

  LeadEnrich:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lead_enrich.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Events:
        PostEnrich:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /leads/enrich
            Method: post

  InboundEmailsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  SesEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-ses-events"

  SesEventsHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ses_events_handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Events:
        FromSesSNS:
          Type: SNS
          Properties:
            Topic: !Ref SesEventsTopic

  # ✅ FIXED INDENTATION – aligned with other resources
  SesInboundParser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ses_inbound_parser.lambda_handler
      Policies:
        - AmazonS3ReadOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: LeadsTable
      Events:
        EmailIngress:
          Type: S3
          Properties:
            Bucket: !Ref InboundEmailsBucket
            Events: s3:ObjectCreated:*

Outputs:
  ApiUrl:
    Description: API Gateway base URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  LeadsTableName:
    Value: !Ref LeadsTable
